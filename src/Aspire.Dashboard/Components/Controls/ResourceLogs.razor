@namespace Aspire.Dashboard.Components
@typeparam TViewModel where TViewModel : ResourceViewModel
@using Aspire.Dashboard.Model
@inject IDashboardViewModelService DashboardViewModelService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Microsoft.Aspire @ResourceType Logs</PageTitle>

<h1>@ResourceType Logs</h1>

<div>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <FluentSelect TOption="TViewModel"
                          Items="@Resources"
                          OptionValue="@(c => c.Name)"
                          OptionText="GetDisplayText"
                          @bind-SelectedOption="_selectedResource"
                          @bind-SelectedOption:after="HandleSelectedOptionChangedAsync" />
            <FluentLabel Typo="Typography.Body">@_status</FluentLabel>
            </FluentStack>
            <LogViewer @ref="_logViewer" />
        </FluentStack>
    </div>

    @code {

    [Parameter]
    public required string ResourceName { get; init; }
    [Parameter]
    public required string ResourceType { get; init; }
    [Parameter]
    public required string LogLoadingResources { get; init; }
    [Parameter]
    public required string LogNoResourceSelected { get; init; }
    [Parameter]
    public required string LogNotAvailable { get; init; }
    [Parameter]
    public required Func<IDashboardViewModelService, Task<List<TViewModel>>> GetResourcesFunc { get; init; }
    [Parameter]
    public required Func<IDashboardViewModelService, IEnumerable<NamespacedName>?, CancellationToken, IAsyncEnumerable<ComponentChanged<TViewModel>>> WatchResourcesFunc { get; init; }
    [Parameter]
    public required string UrlPrefix { get; init; }

    private TViewModel? _selectedResource;
    private Dictionary<string, TViewModel> _resourceNameMapping = new();
    private IEnumerable<TViewModel> Resources => _resourceNameMapping.Select(kvp => kvp.Value).OrderBy(c => c.Name);
    private LogViewer? _logViewer;
    private CancellationTokenSource _watchContainersTokenSource = new CancellationTokenSource();
    private CancellationTokenSource? _watchLogsTokenSource;
    private string _status = LogStatus.Initializing;

    protected override async Task OnInitializedAsync()
    {
        _status = LogLoadingResources;

        var initialList = await GetResourcesFunc(DashboardViewModelService);

        foreach (var result in initialList)
        {
            _resourceNameMapping[result.Name] = result;
        }

        if (ResourceName is not null)
        {
            _selectedResource = initialList?.FirstOrDefault(c => string.Equals(ResourceName, c.Name, StringComparison.Ordinal));
        }
        else if (initialList?.Count > 0)
        {
            _selectedResource = initialList[0];
        }

        await LoadLogsAsync();

        _ = Task.Run(async () =>
        {
            await foreach (var componentChanged in WatchResourcesFunc(DashboardViewModelService, initialList?.Select(t => t.NamespacedName), _watchContainersTokenSource.Token))
            {
                await OnResourceListChangedAsync(componentChanged.ObjectChangeType, componentChanged.Component);
            }
        });
    }

    private Task ClearLogsAsync()
        => _logViewer is not null ? _logViewer.ClearLogsAsync() : Task.CompletedTask;

    private async ValueTask LoadLogsAsync()
    {
        if (_selectedResource is null)
        {
            _status = LogNoResourceSelected;
        }
        else if (_logViewer is null)
        {
            _status = LogStatus.InitializingLogViewer;
        }
        else
        {
            _watchLogsTokenSource = new CancellationTokenSource();
            if (await _selectedResource.LogSource.StartAsync(_watchLogsTokenSource.Token))
            {
                _ = Task.Run(async () =>
                {
                    await _logViewer.WatchLogsAsync(() => _selectedResource.LogSource.WatchOutputLogAsync(_watchLogsTokenSource.Token), LogEntryType.Default);
                });

                _ = Task.Run(async () =>
                {
                    await _logViewer.WatchLogsAsync(() => _selectedResource.LogSource.WatchErrorLogAsync(_watchLogsTokenSource.Token), LogEntryType.Error);
                });

                _status = LogStatus.WatchingLogs;
            }
            else
            {
                _watchLogsTokenSource = null;
                _status = LogNotAvailable;
            }
        }
    }

    private async Task HandleSelectedOptionChangedAsync()
    {
        if (_selectedResource is not null)
        {
            // Change the URL
            NavigationManager.NavigateTo($"{UrlPrefix}/{_selectedResource.Name}");
            await StopWatchingLogsAsync();
            await ClearLogsAsync();
            await LoadLogsAsync();
        }
    }

    private async Task OnResourceListChangedAsync(ObjectChangeType changeType, TViewModel resourceViewModel)
    {
        if (changeType == ObjectChangeType.Added)
        {
            _resourceNameMapping[resourceViewModel.Name] = resourceViewModel;

            if (_selectedResource is null)
            {
                if (string.IsNullOrEmpty(ResourceName) || string.Equals(ResourceName, resourceViewModel.Name, StringComparison.Ordinal))
                {
                    _selectedResource = resourceViewModel;
                    await LoadLogsAsync();
                }
            }
        }
        else if (changeType == ObjectChangeType.Modified)
        {
            _resourceNameMapping[resourceViewModel.Name] = resourceViewModel;
            if (string.Equals(_selectedResource?.Name, resourceViewModel.Name, StringComparison.Ordinal))
            {
                _selectedResource = resourceViewModel;

                if (_watchLogsTokenSource is null)
                {
                    await LoadLogsAsync();
                }
            }
        }
        else if (changeType == ObjectChangeType.Deleted)
        {
            _resourceNameMapping.Remove(resourceViewModel.Name);
            if (string.Equals(_selectedResource?.Name, resourceViewModel.Name, StringComparison.Ordinal))
            {
                if (_resourceNameMapping.Count > 0)
                {
                    _selectedResource = Resources.First();
                    await HandleSelectedOptionChangedAsync();
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private static string GetDisplayText(TViewModel resource)
    {
        string stateText = "";
        if (string.IsNullOrEmpty(resource.State))
        {
            stateText = " (Unknown State)";
        }
        else if (resource.State != "Running")
        {
            stateText = $" ({resource.State})";
        }
        return $"{resource.Name}{stateText}";
    }

    public async ValueTask DisposeAsync()
    {
        await DisposeWatchContainersTokenSource();
        await StopWatchingLogsAsync();
    }

    private async Task DisposeWatchContainersTokenSource()
    {
        await _watchContainersTokenSource.CancelAsync();
        _watchContainersTokenSource.Dispose();
    }

    private async Task StopWatchingLogsAsync()
    {
        if (_watchLogsTokenSource is not null)
        {
            await _watchLogsTokenSource.CancelAsync();
            _watchLogsTokenSource.Dispose();
            // The token source only gets created if selected resource is not null
            await _selectedResource!.LogSource.StopAsync();
            _watchLogsTokenSource = null;
        }
    }
}
